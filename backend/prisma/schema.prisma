// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Product {
  id          Int      @id @default(autoincrement())  // Changed from UUID to Int
  name        String
  categoryId  Int
  brandId     Int?
  flavorId    Int?
  volumeId    Int?
  packSizeId  Int?
  price       Float
  stock       Int
  category    Category @relation(fields: [categoryId], references: [id])
  brand       Brand?    @relation(fields: [brandId], references: [id])
  flavor      Flavor?   @relation(fields: [flavorId], references: [id])
  volume      Volume?   @relation(fields: [volumeId], references: [id])
  packSize    PackSize? @relation(fields: [packSizeId], references: [id])
  orderItems  OrderItem[]
}

model Category {
  id       Int      @id @default(autoincrement())  // Changed
  name     String   @unique()
  products Product[]
}

model Brand {
  id       Int      @id @default(autoincrement())  // Changed
  name     String   @unique()
  products Product[]
}

model Flavor {
  id       Int      @id @default(autoincrement())  // Changed
  name     String   @unique()
  products Product[]
}

model Volume {
  id       Int      @id @default(autoincrement())  // Changed
  name     String   @unique()
  products Product[]
}

model PackSize {
  id       Int      @id @default(autoincrement())  // Changed
  name     String   @unique()
  products Product[]
}

model Order {
  id           Int      @id @default(autoincrement())  // Changed
  userId       Int
  status       OrderStatus
  orderDate    DateTime @default(now())
  deliveryDate DateTime?
  totalAmount  Float
  paymentStatus PaymentStatus
  user         User     @relation(fields: [userId], references: [id])
  orderItems   OrderItem[]
}

model OrderItem {
  id        Int     @id @default(autoincrement())  // Changed
  orderId   Int
  productId Int
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id])
  product   Product @relation(fields: [productId], references: [id])
}

model User {
  id        Int     @id @default(autoincrement())  // Changed
  username  String  @unique
  email     String  @unique
  password  String
  orders    Order[]
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
  SHIPPED
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
}